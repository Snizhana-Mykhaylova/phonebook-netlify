{"version":3,"file":"static/js/ContactsView.cbefff25.chunk.js","mappings":"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","sources":["redux/phonebook-operations.tsx","redux/phonebook-selectors.tsx","components/ContactForm.tsx","components/ContactItem.tsx","components/ContactList.tsx","components/Filter.tsx","views/ContactsView.tsx","../node_modules/@mui/icons-material/BorderColorOutlined.js","../node_modules/@mui/icons-material/DeleteOutlined.js"],"sourcesContent":["import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  updateContactRequest,\r\n  updateContactSuccess,\r\n  updateContactError\r\n} from './phonebook-actions';\r\n\r\naxios.defaults.baseURL = 'https://test-bakend-json-server.herokuapp.com';\r\n\r\ninterface Contact {\r\n  id: string;\r\n  name: string;\r\n  phone: string;\r\n  img?: string;\r\n}\r\n\r\ninterface IParams {\r\n  id: string;\r\n  body: object;\r\n}\r\n\r\ntype getStateFn = () => any;\r\n\r\nconst addContact = (name: string, phone: string) => (\r\n  dispatch: Dispatch,\r\n  getState: getStateFn\r\n) => {\r\n  const contact = { name, phone };\r\n  dispatch(addContactRequest());\r\n  const state = getState();\r\n  const contacts = state.phonebook.contacts;\r\n  const normalizedName = name.toLowerCase();\r\n  if (\r\n    contacts.find(\r\n      (contact: Contact) => contact.name.toLowerCase() === normalizedName\r\n    )\r\n  ) {\r\n    alert(`${name} is already in contacts`);\r\n    dispatch(fetchContactSuccess({}));\r\n    return;\r\n  }\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch((err) => dispatch(addContactError(err.message)));\r\n};\r\n\r\nconst deleteContact = (id: string) => (dispatch: Dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch((err) => dispatch(deleteContactError(err.message)));\r\n};\r\n\r\nconst fetchContact = () => (dispatch: Dispatch) => {\r\n  dispatch(fetchContactRequest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n    .catch((err) => dispatch(fetchContactError(err.message)));\r\n};\r\n\r\nconst updateContact = ({ id, body }: IParams) => (dispatch: Dispatch) => {\r\n  console.log(id);\r\n  console.log(body);\r\n  dispatch(updateContactRequest());\r\n  axios\r\n    .patch(`/contacts/${id}`, body)\r\n    .then(({ data }) => dispatch(updateContactSuccess(data)))\r\n    .catch((error) => dispatch(updateContactError(error.message)));\r\n};\r\n\r\nexport default {\r\n  addContact,\r\n  deleteContact,\r\n  fetchContact,\r\n  updateContact\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\ninterface Contact {\r\n  id: string;\r\n  name: string;\r\n  phone: string;\r\n  img?: string;\r\n}\r\n\r\ninterface IState {\r\n  phonebook: {\r\n    contacts: Contact[];\r\n    filter: string;\r\n    loading: boolean;\r\n    error: boolean;\r\n    alert: boolean;\r\n  };\r\n}\r\n\r\nexport const getLoading = (state: IState) => state.phonebook.loading;\r\nexport const getAlert = (state: IState) => state.phonebook.alert;\r\nexport const getError = (state: IState) => state.phonebook.error;\r\nexport const getFilter = (state: IState) => state.phonebook.filter;\r\nexport const getContacts = (state: IState) => state.phonebook.contacts;\r\n\r\nexport const getFilteredContacts = createSelector(\r\n  [getFilter, getContacts],\r\n  (filter, contacts) => {\r\n    if (filter) {\r\n      const normalizedFilter = filter.toLowerCase();\r\n      return contacts.filter(({ name }) =>\r\n        name.toLowerCase().includes(normalizedFilter)\r\n      );\r\n    }\r\n    return contacts;\r\n  }\r\n);\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Button, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport operations from '../redux/phonebook-operations';\r\n\r\nconst ContactForm = () => {\r\n  const [phone, setPhone] = useState('');\r\n  const [name, setName] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChangeName = (e: React.ChangeEvent<HTMLInputElement>) =>\r\n    setName(e.target.value);\r\n  const handleChangePhone = (e: React.ChangeEvent<HTMLInputElement>) =>\r\n    setPhone(e.target.value);\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    dispatch(operations.addContact(name, phone));\r\n    setName('');\r\n    setPhone('');\r\n  };\r\n\r\n  return (\r\n    <Form inline onSubmit={handleSubmit}>\r\n      <FormGroup>\r\n        <Label for='name' hidden>\r\n          Name\r\n        </Label>\r\n        <Input\r\n          value={name}\r\n          placeholder='Name'\r\n          type='text'\r\n          name='name'\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={handleChangeName}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label for='phone' hidden>\r\n          setPhone\r\n        </Label>\r\n        <Input\r\n          value={phone}\r\n          placeholder='Phone'\r\n          type='tel'\r\n          name='phone'\r\n          pattern='(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})'\r\n          title='Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +'\r\n          required\r\n          onChange={handleChangePhone}\r\n        />\r\n      </FormGroup>\r\n\r\n      <Button\r\n        className='add-contact-button'\r\n        type='submit'\r\n        variant='contained'\r\n        color='primary'\r\n      >\r\n        Add contact\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import { useDispatch } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport operations from '../redux/phonebook-operations';\r\nimport noUser from '../utils/noUser.png';\r\nimport { Row, Col, Button } from 'reactstrap';\r\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\r\nimport BorderColorOutlinedIcon from '@mui/icons-material/BorderColorOutlined';\r\n\r\ntype Contact = { id: string; name: string; phone: string; img?: string };\r\n\r\ninterface Props {\r\n  contact: Contact;\r\n}\r\n\r\nconst ContactItem = ({ contact }: Props) => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <li>\r\n      <Row xs='2'>\r\n        <Col className='bg-light border phone-fild'>\r\n          <img\r\n            className='user-photo'\r\n            src={contact.img || noUser}\r\n            alt={contact.name}\r\n          />\r\n\r\n          <span> {contact.name}</span>\r\n        </Col>\r\n        <Col className='bg-light border phone-fild'>\r\n          <span>{contact.phone}</span>\r\n\r\n          <div className='button-set'>\r\n            <Button\r\n              color='light'\r\n              onClick={() => dispatch(operations.deleteContact(contact.id))}\r\n            >\r\n              <DeleteOutlinedIcon color='primary' />\r\n            </Button>\r\n            <Button color='light'>\r\n              <NavLink\r\n                to={{\r\n                  pathname: `/update/${contact.id}`\r\n                }}\r\n              >\r\n                <BorderColorOutlinedIcon color='primary' />\r\n              </NavLink>\r\n            </Button>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ContactItem;\r\n","import { useSelector } from 'react-redux';\r\n\r\nimport ContactItem from './ContactItem';\r\nimport * as selectors from '../redux/phonebook-selectors';\r\n\r\ninterface Contact {\r\n  id: string;\r\n  name: string;\r\n  phone: string;\r\n  img?: string;\r\n}\r\n\r\nconst ContactList = () => {\r\n  const contacts: Contact[] = useSelector(selectors.getFilteredContacts);\r\n\r\n  return (\r\n    <ul className='list'>\r\n      {contacts.map((contact) => (\r\n        <ContactItem key={contact.id} contact={contact} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import { Input } from 'reactstrap';\r\n\r\nimport { useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../redux/phonebook-actions';\r\nimport * as selectors from '../redux/phonebook-selectors';\r\n\r\nconst Filter = () => {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(selectors.getFilter);\r\n  const onChange = useCallback(\r\n    (event) => dispatch(actions.filterChange(event.target.value)),\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <Input\r\n      className='filter'\r\n      placeholder='find contact by name'\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Spinner } from 'reactstrap';\r\n\r\nimport ContactForm from '../components/ContactForm';\r\nimport ContactList from '../components/ContactList';\r\nimport Filter from '../components/Filter';\r\n\r\nimport * as selectors from '../redux/phonebook-selectors';\r\nimport operations from '../redux/phonebook-operations';\r\n\r\nconst ContactsView = () => {\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(selectors.getLoading);\r\n  const isError = useSelector(selectors.getError);\r\n\r\n  useEffect(() => {\r\n    dispatch(operations.fetchContact());\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Filter />\r\n      <h2 className='section__title'>Contacts</h2>\r\n      <ContactForm />\r\n      <ContactList />\r\n      {isLoading && <Spinner color='primary'>Loading...</Spinner>}\r\n      {isError && <h2>Something goes wrong :( </h2>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsView;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m16.81 8.94-3.75-3.75L4 14.25V18h3.75l9.06-9.06zM6 16v-.92l7.06-7.06.92.92L6.92 16H6zm13.71-9.96c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.2-.2-.45-.29-.71-.29-.25 0-.51.1-.7.29l-1.83 1.83 3.75 3.75 1.83-1.83zM2 20h20v4H2z\"\n}), 'BorderColorOutlined');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z\"\n}), 'DeleteOutlined');\n\nexports.default = _default;"],"names":["axios","addContact","name","phone","dispatch","getState","contact","addContactRequest","contacts","phonebook","normalizedName","toLowerCase","find","alert","fetchContactSuccess","then","data","addContactSuccess","catch","err","addContactError","message","deleteContact","id","deleteContactRequest","deleteContactSuccess","deleteContactError","fetchContact","fetchContactRequest","fetchContactError","updateContact","body","console","log","updateContactRequest","updateContactSuccess","error","updateContactError","getLoading","state","loading","getAlert","getError","getFilter","filter","getContacts","getFilteredContacts","createSelector","normalizedFilter","includes","useState","setPhone","setName","useDispatch","inline","onSubmit","e","preventDefault","operations","for","hidden","value","placeholder","type","pattern","title","required","onChange","target","className","variant","color","xs","src","img","noUser","alt","onClick","DeleteOutlined","to","pathname","BorderColorOutlined","useSelector","selectors","map","useCallback","event","actions","isLoading","isError","useEffect","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}